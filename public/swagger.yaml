openapi: 3.0.1
info:
  title: Nevo Test API
  description: This is API specifications for Tuan Nguyen PHP assessment
  termsOfService: http://localhost:8000/terms/
  contact:
    email: tuannguyen2042@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://localhost:8000/docs
servers:
- url: http://localhost:8000/api
tags:
- name: employee
  description: APIs for accessing Employee resource

paths:
  /employees:
    post:
      tags:
        - employee
      summary: Add a new employee
      operationId: createEmployee
      requestBody:
        description: Employee object that needs to be added to the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}

  /employees/{id}:
    get:
      tags:
        - employee
      summary: Get employ by ID
      description: Returns a single employee
      operationId: showEmployee
      parameters:
      - name: id
        in: path
        description: ID of employee to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        404:
          description: Employee not found
          content: {}
    put:
      tags:
      - employee
      summary: Update an existing employee by ID
      operationId: updateEmployee
      parameters:
      - name: id
        in: path
        description: ID of employee to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Employee object that needs to be added to the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        200:
          description: Employee updated
          content: {}
        400:
          description: Validation error
          content: {}
        404:
          description: Employee not found
          content: {}

    delete:
      tags:
      - employee
      summary: Delete an existing employee by ID
      operationId: deleteEmployee
      parameters:
      - name: id
        in: path
        description: ID of employee to be deleted
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Employee object that needs to be added to the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        204:
          description: Employee deleted
          content: {}
        400:
          description: Validation error
          content: {}
        404:
          description: Employee not found
          content: {}
        
  /employees/{id}/children:
    get:
      tags:
        - employee
      summary: Find all the child employees of a parent employee with a management position
      operationId: childEmployees
      parameters:
        - name: id
          in: path
          description: ID of an employee with a management position
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Employee deleted
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Employee'
        404:
          description: Employee not found
          content: {}

  /employees/search/{field}/{value}:
    get:
      tags:
        - employee
      summary: Find all the child employees of a parent employee with a management position
      operationId: childEmployees
      parameters:
        - name: field
          in: path
          description: Search field name
          required: true
          schema:
            type: string
            enum:
              - position
        - name: value
          in: path
          description: Search field value
          required: true
          schema:
            type: string
            
      responses:
        200:
          description: Found employees list
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Employee'
        
components:
  schemas:
    Employee:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string         
        position:
          type: integer
          format: int32
        superior:
          type: integer
          format: int32
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
